/* General tables used by all groups */
/* ID field must be and INTEGER and not an INT to increment correctly */

/* A User is anyone with a login to the system */
CREATE TABLE User(
	ID INTEGER PRIMARY KEY,
	USERNAME TEXT NOT NULL,
	PASSWORD TEXT NOT NULL,
	FIRSTNAME TEXT NOT NULL,
	LASTNAME TEXT NOT NULL,
	EMAIL TEXT NOT NULL,
	ROLE TEXT NOT NULL
);

/* Admin Table */
CREATE TABLE Admin(
	USER_ID INTEGER NOT NULL,
	FOREIGN KEY(USER_ID) REFERENCES User(ID)
);

/* Professor Table */
CREATE TABLE Professor(
	USER_ID INTEGER NOT NULL,
	FOREIGN KEY(USER_ID) REFERENCES User(ID)
);

/* Student Table */
CREATE TABLE Student(
	USER_ID INTEGER NOT NULL,
	YEAR_LEVEL INTEGER NOT NULL,
	GPA REAL NOT NULL,
	FOREIGN KEY(USER_ID) REFERENCES User(ID)
);

/* Section Table. */
CREATE TABLE Section(
	ID INTEGER PRIMARY KEY,
	MAX_STUDENTS INTEGER NOT NULL,
	PROFESSOR_ID INTEGER NOT NULL,
	COURSE_ID INTEGER NOT NULL,
	TERM_ID INTEGER NOT NULL,
	CLASSROOM_ID INTEGER NOT NULL,
	AVAILABILITY BIT DEFAULT 1,
	FOREIGN KEY(PROFESSOR_ID) REFERENCES User(ID),
	FOREIGN KEY(COURSE_ID) REFERENCES Course(ID),
	FOREIGN KEY(TERM_ID) REFERENCES Term(ID),
	FOREIGN KEY(CLASSROOM_ID) REFERENCES Classroom(ID)
);

/* Course Table. */
CREATE TABLE Course(
	ID INTEGER PRIMARY KEY,
	COURSE_CODE TEXT NOT NULL,
	NAME TEXT NOT NULL,
	CREDITS INTEGER NOT NULL,
	MIN_GPA INTEGER NOT NULL,
	AVAILABILITY BIT DEFAULT 1,
	CONSTRAINT CODE_UNIQUE UNIQUE (COURSE_CODE)
);

/* Join table. Student to Section relation */
CREATE TABLE Student_Section(
	ID INTEGER PRIMARY KEY,
	STUDENT_ID INTEGER NOT NULL,
	SECTION_ID INTEGER NOT NULL,
	FOREIGN KEY(STUDENT_ID) REFERENCES Student(ID),
	FOREIGN KEY(SECTION_ID) REFERENCES Section(ID)
);
